name: 🧪 Test Build & Validation

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - '0.3.0/**'
  pull_request:
    branches: [ master, main ]
    paths:
      - '0.3.0/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # VALIDATION JOB - Code quality and syntax
  # ============================================================================
  validate:
    name: 🔍 Code Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '0.3.0/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ./0.3.0
        run: npm ci --no-audit

      - name: 🔍 JavaScript Syntax Validation
        working-directory: ./0.3.0
        run: |
          echo "Validating JavaScript syntax..."
          
          # Check main.js
          node -c main.js && echo "✅ main.js syntax valid" || exit 1
          
          # Check renderer.js  
          node -c renderer.js && echo "✅ renderer.js syntax valid" || exit 1
          
          # Check i18n.js
          node -c i18n.js && echo "✅ i18n.js syntax valid" || exit 1
          
          # Check config-manager.js if exists
          if [ -f "config-manager.js" ]; then
            node -c config-manager.js && echo "✅ config-manager.js syntax valid" || exit 1
          fi

      - name: 📋 Package.json Validation
        working-directory: ./0.3.0
        run: |
          echo "Validating package.json structure..."
          node -e "
            const pkg = require('./package.json');
            
            // Version check
            if (pkg.version !== '0.3.0') throw new Error('Version should be 0.3.0');
            
            // Dependencies check
            if (!pkg.dependencies['electron-updater']) throw new Error('Missing electron-updater dependency');
            
            // Build config check
            if (!pkg.build) throw new Error('Missing build configuration');
            if (!pkg.build.publish) throw new Error('Missing publish configuration');
            
            // Scripts check
            if (!pkg.scripts.start) throw new Error('Missing start script');
            if (!pkg.scripts.build) throw new Error('Missing build script');
            
            console.log('✅ Package.json validation passed');
          "

      - name: 🌐 i18n Validation
        working-directory: ./0.3.0
        run: |
          echo "Validating i18n system..."
          node -e "
            const I18n = require('./i18n.js');
            const i18n = new I18n();
            
            // Test German translations
            i18n.setLanguage('de');
            const deTest = i18n.t('sleepTimer');
            if (!deTest) throw new Error('German translation missing for sleepTimer');
            
            // Test English translations
            i18n.setLanguage('en');
            const enTest = i18n.t('sleepTimer');
            if (!enTest) throw new Error('English translation missing for sleepTimer');
            
            console.log('✅ i18n system validation passed');
          "

  # ============================================================================
  # TEST BUILD JOB - Quick build test without distribution
  # ============================================================================
  test-build:
    name: 🔨 Test Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: validate
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '0.3.0/package-lock.json'

      - name: 🐧 Setup Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libdrm2 libxss1 libgconf-2-4

      - name: 📦 Install dependencies
        working-directory: ./0.3.0
        run: npm ci --no-audit

      - name: 🔨 Test build
        working-directory: ./0.3.0
        run: |
          echo "Testing build process on ${{ matrix.os }}..."
          
          # Test that electron-builder can initialize
          npx electron-builder --help > /dev/null
          
          # Test that all source files are readable
          test -r main.js
          test -r renderer.js
          test -r i18n.js
          test -r index.html
          test -r style.css
          test -r setup-wizard.html
          
          echo "✅ Build test passed on ${{ matrix.os }}"

  # ============================================================================
  # PERFORMANCE TEST JOB - Benchmark validation
  # ============================================================================
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        working-directory: ./0.3.0
        run: npm ci --no-audit

      - name: 🐧 Setup Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libdrm2 libxss1 libgconf-2-4 xvfb

      - name: ⚡ Performance Benchmark
        working-directory: ./0.3.0
        run: |
          echo "Running performance benchmarks..."
          
          # Create performance test script
          cat > performance-test.js << 'EOF'
          const { spawn } = require('child_process');
          const path = require('path');
          
          async function testStartupTime() {
            console.log('Testing startup performance...');
            
            const startTime = Date.now();
            
            // Start electron app
            const app = spawn('npx', ['electron', '.'], {
              env: { ...process.env, DISPLAY: ':99' },
              stdio: 'pipe'
            });
            
            // Wait for app to be ready (simplified test)
            await new Promise((resolve) => {
              setTimeout(() => {
                app.kill();
                resolve();
              }, 5000);
            });
            
            const duration = Date.now() - startTime;
            console.log(`Startup duration: ${duration}ms`);
            
            // Validate startup time is under 3 seconds
            if (duration > 3000) {
              throw new Error(`Startup too slow: ${duration}ms (should be < 3000ms)`);
            }
            
            console.log('✅ Startup performance test passed');
          }
          
          testStartupTime().catch(console.error);
          EOF
          
          # Start virtual display
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 2
          
          # Run performance test
          timeout 30 node performance-test.js || echo "Performance test completed"

  # ============================================================================
  # SECURITY SCAN JOB - Security vulnerability check
  # ============================================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        working-directory: ./0.3.0
        run: npm ci --no-audit

      - name: 🔍 NPM Audit
        working-directory: ./0.3.0
        run: |
          echo "Running npm security audit..."
          npm audit --audit-level=high || echo "⚠️ Some vulnerabilities found, review recommended"

      - name: 🔒 Security Code Scan
        working-directory: ./0.3.0
        run: |
          echo "Scanning for security issues..."
          
          # Check for eval usage
          if grep -r "eval(" *.js; then
            echo "❌ Found eval() usage - security risk"
            exit 1
          fi
          
          # Check for innerHTML usage
          if grep -r "innerHTML" *.js *.html; then
            echo "⚠️ Found innerHTML usage - review for XSS risks"
          fi
          
          # Check for hardcoded secrets
          if grep -r -i "password\|secret\|token\|key" *.js | grep -v "spotify_client\|removeItem\|getItem"; then
            echo "⚠️ Potential hardcoded secrets found - review recommended"
          fi
          
          echo "✅ Basic security scan completed"

  # ============================================================================
  # RESULTS JOB - Aggregate results
  # ============================================================================
  results:
    name: 📊 Test Results
    runs-on: ubuntu-latest
    needs: [validate, test-build, performance-test, security-scan]
    if: always()
    
    steps:
      - name: 📋 Summary
        run: |
          echo "## 🧪 Test Results Summary"
          echo "- Validation: ${{ needs.validate.result }}"
          echo "- Test Build: ${{ needs.test-build.result }}"
          echo "- Performance: ${{ needs.performance-test.result }}"
          echo "- Security: ${{ needs.security-scan.result }}"
          
          if [[ "${{ needs.validate.result }}" == "success" && 
                "${{ needs.test-build.result }}" == "success" && 
                "${{ needs.performance-test.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All tests passed! SPOTEYFA v0.3.0 is ready for release."
          else
            echo "❌ Some tests failed. Please review before release."
          fi