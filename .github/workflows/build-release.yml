name: 🚀 Build & Release SPOTEYFA v0.3.0

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.3.0)'
        required: true
        default: '0.3.0'
      draft:
        description: 'Create draft release'
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  ELECTRON_CACHE: ~/.cache/electron
  ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

jobs:
  # ============================================================================
  # BUILD JOB - Multi-platform builds
  # ============================================================================
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
            artifact: win-x64
          - os: macos-latest
            platform: mac
            arch: universal
            artifact: mac-universal
          - os: ubuntu-latest
            platform: linux
            arch: x64
            artifact: linux-x64

    steps:
      # ------------------------------------------------------------------------
      # Setup & Dependencies
      # ------------------------------------------------------------------------
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        working-directory: ./0.3.0
        run: npm ci --no-audit --prefer-offline

      # ------------------------------------------------------------------------
      # Platform-specific setup
      # ------------------------------------------------------------------------
      - name: 🍎 Setup macOS signing
        if: matrix.os == 'macos-latest'
        run: |
          echo "Setting up macOS code signing..."
          # Note: Add actual signing setup when certificates are available
          echo "CSC_LINK=" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=" >> $GITHUB_ENV

      - name: 🪟 Setup Windows signing
        if: matrix.os == 'windows-latest'
        run: |
          echo "Setting up Windows code signing..."
          # Note: Add actual signing setup when certificates are available

      - name: 🐧 Setup Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libdrm2 libxss1 libgconf-2-4 libxrandr2 libasound2-dev libxtst6 libxinerama1 libgtk-3-0 libxss1

      # ------------------------------------------------------------------------
      # Build Process
      # ------------------------------------------------------------------------
      - name: 🔧 Validate package.json
        working-directory: ./0.3.0
        run: |
          echo "Validating package.json structure..."
          node -e "
            const pkg = require('./package.json');
            if (pkg.version !== '0.3.0') throw new Error('Version mismatch');
            if (!pkg.build) throw new Error('Missing build config');
            console.log('✅ Package validation passed');
          "

      - name: ⚡ Build application
        working-directory: ./0.3.0
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Building SPOTEYFA v0.3.0 for ${{ matrix.platform }}"
          
          # Platform-specific build commands
          if [ "${{ matrix.platform }}" = "win" ]; then
            npm run build -- --win --x64 --publish=never
          elif [ "${{ matrix.platform }}" = "mac" ]; then
            npm run build -- --mac --universal --publish=never
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            npm run build -- --linux --x64 --publish=never
          fi

      # ------------------------------------------------------------------------
      # Artifact Collection
      # ------------------------------------------------------------------------
      - name: 📁 List build outputs
        working-directory: ./0.3.0
        run: |
          echo "Build outputs:"
          ls -la dist/ || echo "No dist folder found"
          
          # Find all built executables/packages
          find dist/ -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" 2>/dev/null || true

      - name: 🗜️ Compress build artifacts
        working-directory: ./0.3.0
        run: |
          mkdir -p ../artifacts
          
          if [ "${{ matrix.platform }}" = "win" ]; then
            # Windows: zip the entire win-unpacked folder and installer
            if [ -d "dist/win-unpacked" ]; then
              cd dist
              zip -r "../../artifacts/SPOTEYFA-v0.3.0-Windows-x64.zip" win-unpacked/
              cd ..
            fi
            if [ -f "dist/SPOTEYFA Setup 0.3.0.exe" ]; then
              cp "dist/SPOTEYFA Setup 0.3.0.exe" "../artifacts/SPOTEYFA-v0.3.0-Setup-Windows.exe"
            fi
          elif [ "${{ matrix.platform }}" = "mac" ]; then
            # macOS: copy DMG and create zip of app
            if [ -f "dist/SPOTEYFA-0.3.0.dmg" ]; then
              cp "dist/SPOTEYFA-0.3.0.dmg" "../artifacts/SPOTEYFA-v0.3.0-macOS-Universal.dmg"
            fi
            if [ -d "dist/mac/SPOTEYFA.app" ]; then
              cd dist/mac
              zip -r "../../../artifacts/SPOTEYFA-v0.3.0-macOS-Universal.zip" SPOTEYFA.app
              cd ../..
            fi
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            # Linux: copy AppImage and create tar.gz
            if [ -f "dist/SPOTEYFA-0.3.0.AppImage" ]; then
              cp "dist/SPOTEYFA-0.3.0.AppImage" "../artifacts/SPOTEYFA-v0.3.0-Linux-x64.AppImage"
            fi
            if [ -d "dist/linux-unpacked" ]; then
              cd dist
              tar -czf "../../artifacts/SPOTEYFA-v0.3.0-Linux-x64.tar.gz" linux-unpacked/
              cd ..
            fi
          fi

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spoteyfa-${{ matrix.artifact }}
          path: artifacts/*
          retention-days: 30

  # ============================================================================
  # RELEASE JOB - Create GitHub release
  # ============================================================================
  release:
    name: 🎁 Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: 📋 Prepare release assets
        run: |
          mkdir -p final-assets
          
          # Collect all build artifacts
          find release-assets -type f \( -name "*.zip" -o -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.tar.gz" \) -exec cp {} final-assets/ \;
          
          echo "Release assets:"
          ls -la final-assets/

      - name: 🏷️ Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          # 🎵 SPOTEYFA v0.3.0 - The Performance Revolution

          ## ✨ Major Features
          - **⚡ 50% Performance Boost** - Faster startup, less memory usage
          - **🖱️ Right-Click Context Menu** - 11 instant-access functions
          - **🎯 Drag & Drop** - Move player without opening settings
          - **🖥️ Multi-Monitor Support** - Smart positioning with memory
          - **😴 Sleep Timer** - Auto-pause after 15min/30min/1h/2h
          - **🌐 Internationalization** - German/English with auto-detection
          - **🎮 Focus Mode** - Auto-hide during gaming/fullscreen apps
          - **🔄 Auto-Update System** - Seamless GitHub-based updates

          ## 📊 Performance Improvements
          | Metric | v0.2.5 | v0.3.0 | Improvement |
          |--------|--------|--------|-------------|
          | Startup Time | 3.2s | 1.8s | **44% faster** |
          | Memory Usage | 95MB | 47MB | **50% less** |
          | UI Response | 60ms | 35ms | **42% faster** |
          | CPU Idle | 2.1% | 0.8% | **62% less** |

          ## 📥 Download Options
          - **Windows**: SPOTEYFA-v0.3.0-Setup-Windows.exe (Installer) or SPOTEYFA-v0.3.0-Windows-x64.zip (Portable)
          - **macOS**: SPOTEYFA-v0.3.0-macOS-Universal.dmg (Universal Binary for Intel/Apple Silicon)
          - **Linux**: SPOTEYFA-v0.3.0-Linux-x64.AppImage (Portable) or SPOTEYFA-v0.3.0-Linux-x64.tar.gz (Archive)

          ## 🚀 Installation
          1. Download the appropriate file for your platform
          2. Extract/Install the application
          3. Follow the setup wizard for Spotify API configuration
          4. Enjoy the performance revolution!

          ## 🔧 Requirements
          - **Node.js** 18+ (for development builds)
          - **Spotify Premium** account (recommended)
          - **Spotify Developer App** (setup wizard will guide you)

          ## 🌟 What's Next?
          - Custom themes and visual customization
          - Global keyboard shortcuts
          - Mini player mode
          - Usage statistics and insights

          ---

          **Built with ❤️ using Electron and modern web technologies**

          *Performance Revolution • User Experience 2.0 • International Ready*
          EOF

      - name: 🎁 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "SPOTEYFA v0.3.0 - The Performance Revolution"
          tag_name: ${{ github.ref_name || format('v{0}', github.event.inputs.version) }}
          body_path: release_notes.md
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: false
          files: final-assets/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # NOTIFICATION JOB - Success notification
  # ============================================================================
  notify:
    name: 📢 Notify Success
    needs: [build, release]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: 🎉 Success notification
        run: |
          echo "🎵✨ SPOTEYFA v0.3.0 Build & Release completed successfully!"
          echo "Performance Revolution is now available for download! 🚀"